// <auto-generated />
using System;
using CodeFirstApproachForDB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeFirstApproachForDB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CodeFirstApproachForDB.Models.Course.MaterialType", b =>
                {
                    b.Property<Guid>("material_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("material_type_id");

                    b.ToTable("material_types");
                });

            modelBuilder.Entity("LMS.Course", b =>
                {
                    b.Property<Guid>("course_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("duration")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_available")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("level_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("thumbnail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("course_id");

                    b.HasIndex("category_id");

                    b.HasIndex("level_id");

                    b.ToTable("course");
                });

            modelBuilder.Entity("LMS.CourseCategory", b =>
                {
                    b.Property<Guid>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.HasKey("category_id");

                    b.ToTable("course_category");
                });

            modelBuilder.Entity("LMS.CourseFeedbackQuestion", b =>
                {
                    b.Property<Guid>("CourseFeedbackQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("course_id")
                        .HasColumnType("char(36)");

                    b.HasKey("CourseFeedbackQuestionId");

                    b.HasIndex("course_id");

                    b.ToTable("courseFeedbackQuestions");
                });

            modelBuilder.Entity("LMS.CourseLevel", b =>
                {
                    b.Property<Guid>("level_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.HasKey("level_id");

                    b.ToTable("course_levels");
                });

            modelBuilder.Entity("LMS.Enrollment", b =>
                {
                    b.Property<Guid>("enrollment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("course_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("enroll_request_status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("enroll_status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("enrollment_date")
                        .HasColumnType("datetime");

                    b.Property<Guid>("learner_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.HasKey("enrollment_id");

                    b.HasIndex("course_id");

                    b.HasIndex("learner_id");

                    b.ToTable("enrollments");
                });

            modelBuilder.Entity("LMS.FeedbackQuestionOptions", b =>
                {
                    b.Property<Guid>("FeedbackQuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CourseFeedbackQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("QuizFeedbackQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TopicFeedbackQuestionId")
                        .HasColumnType("char(36)");

                    b.HasKey("FeedbackQuestionOptionId");

                    b.HasIndex("CourseFeedbackQuestionId");

                    b.HasIndex("QuizFeedbackQuestionId");

                    b.HasIndex("TopicFeedbackQuestionId");

                    b.ToTable("FeedbackQuestionsOptions");
                });

            modelBuilder.Entity("LMS.FeedbackResponse", b =>
                {
                    b.Property<Guid>("FeedbackresponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CourseFeedbackQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("GeneratedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("GeneratedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OptionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("QuizFeedbackQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Response")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TopicFeedbackQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("learner_id")
                        .HasColumnType("char(36)");

                    b.HasKey("FeedbackresponseId");

                    b.HasIndex("CourseFeedbackQuestionId");

                    b.HasIndex("QuizFeedbackQuestionId");

                    b.HasIndex("TopicFeedbackQuestionId");

                    b.HasIndex("learner_id");

                    b.ToTable("FeedbackResponses");
                });

            modelBuilder.Entity("LMS.Learner", b =>
                {
                    b.Property<Guid>("learner_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("account_status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("unblock_request")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("user_last_login")
                        .HasColumnType("datetime");

                    b.HasKey("learner_id");

                    b.ToTable("learners");
                });

            modelBuilder.Entity("LMS.LearnerAnswer", b =>
                {
                    b.Property<Guid>("learner_answer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("created_at")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("learner_attempt_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<Guid>("question_option_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("quiz_question_id")
                        .HasColumnType("char(36)");

                    b.HasKey("learner_answer_id");

                    b.HasIndex("learner_attempt_id");

                    b.HasIndex("question_option_id");

                    b.HasIndex("quiz_question_id");

                    b.ToTable("learner_answers");
                });

            modelBuilder.Entity("LMS.LearnerAttempt", b =>
                {
                    b.Property<Guid>("learner_attempt_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("attempt_count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("datetime");

                    b.Property<Guid>("learner_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<Guid>("quiz_id")
                        .HasColumnType("char(36)");

                    b.Property<float>("score")
                        .HasColumnType("float");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("datetime");

                    b.HasKey("learner_attempt_id");

                    b.HasIndex("learner_id");

                    b.HasIndex("quiz_id");

                    b.ToTable("learner_attempts");
                });

            modelBuilder.Entity("LMS.LearnerProfile", b =>
                {
                    b.Property<Guid>("profile_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("contact_number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("dob")
                        .HasColumnType("date");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("learner_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("profile_photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("stream")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("profile_id");

                    b.HasIndex("learner_id");

                    b.ToTable("learner_profiles");
                });

            modelBuilder.Entity("LMS.LearnerProgress", b =>
                {
                    b.Property<Guid>("learner_progress_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("course_id")
                        .HasColumnType("char(36)");

                    b.Property<bool>("is_watched")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("learner_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("material_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("topic_id")
                        .HasColumnType("char(36)");

                    b.Property<TimeOnly>("total_time")
                        .HasColumnType("time(0)");

                    b.Property<TimeOnly>("watch_time")
                        .HasColumnType("time(0)");

                    b.HasKey("learner_progress_id");

                    b.HasIndex("course_id");

                    b.HasIndex("learner_id");

                    b.HasIndex("material_id");

                    b.HasIndex("topic_id");

                    b.ToTable("learner_progress");
                });

            modelBuilder.Entity("LMS.Material", b =>
                {
                    b.Property<Guid>("material_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("duration")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("file_path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_available")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("material_type_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("topic_id")
                        .HasColumnType("char(36)");

                    b.HasKey("material_id");

                    b.HasIndex("material_type_id");

                    b.HasIndex("topic_id");

                    b.ToTable("materials");
                });

            modelBuilder.Entity("LMS.PasswordHistory", b =>
                {
                    b.Property<Guid>("password_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("learner_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("new_password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("old_password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("password_id");

                    b.HasIndex("learner_id");

                    b.ToTable("password_histories");
                });

            modelBuilder.Entity("LMS.QuestionOption", b =>
                {
                    b.Property<Guid>("question_option_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("created_at")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("is_correct")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("option")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("quiz_question_id")
                        .HasColumnType("char(36)");

                    b.HasKey("question_option_id");

                    b.HasIndex("quiz_question_id");

                    b.ToTable("question_options");
                });

            modelBuilder.Entity("LMS.Quiz", b =>
                {
                    b.Property<Guid>("quiz_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("AttemptsAllowed")
                        .HasColumnType("int");

                    b.Property<Guid>("course_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("created_at")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("name_of_quiz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("pass_mark")
                        .HasColumnType("int");

                    b.Property<Guid>("topic_id")
                        .HasColumnType("char(36)");

                    b.HasKey("quiz_id");

                    b.HasIndex("course_id");

                    b.HasIndex("topic_id");

                    b.ToTable("quizzes");
                });

            modelBuilder.Entity("LMS.QuizFeedbackQuestion", b =>
                {
                    b.Property<Guid>("QuizFeedbackQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("quiz_id")
                        .HasColumnType("char(36)");

                    b.HasKey("QuizFeedbackQuestionId");

                    b.HasIndex("quiz_id");

                    b.ToTable("QuizFeedbackQuestions");
                });

            modelBuilder.Entity("LMS.QuizQuestion", b =>
                {
                    b.Property<Guid>("quiz_question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("created_at")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("question_no")
                        .HasColumnType("int");

                    b.Property<string>("question_type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("quiz_id")
                        .HasColumnType("char(36)");

                    b.HasKey("quiz_question_id");

                    b.HasIndex("quiz_id");

                    b.ToTable("quiz_questions");
                });

            modelBuilder.Entity("LMS.Topic", b =>
                {
                    b.Property<Guid>("topic_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("course_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("datetime");

                    b.Property<string>("modified_by")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("topic_id");

                    b.HasIndex("course_id");

                    b.ToTable("topic");
                });

            modelBuilder.Entity("LMS.TopicFeedbackQuestion", b =>
                {
                    b.Property<Guid>("TopicFeedbackQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("topic_id")
                        .HasColumnType("char(36)");

                    b.HasKey("TopicFeedbackQuestionId");

                    b.HasIndex("topic_id");

                    b.ToTable("TopicFeedbackQuestions");
                });

            modelBuilder.Entity("LMS.Course", b =>
                {
                    b.HasOne("LMS.CourseCategory", "Category")
                        .WithMany("Course")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.CourseLevel", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("LMS.CourseFeedbackQuestion", b =>
                {
                    b.HasOne("LMS.Course", "course")
                        .WithMany()
                        .HasForeignKey("course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("LMS.Enrollment", b =>
                {
                    b.HasOne("LMS.Course", "course")
                        .WithMany()
                        .HasForeignKey("course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Learner", "learner")
                        .WithMany()
                        .HasForeignKey("learner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("learner");
                });

            modelBuilder.Entity("LMS.FeedbackQuestionOptions", b =>
                {
                    b.HasOne("LMS.CourseFeedbackQuestion", "CourseFeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("CourseFeedbackQuestionId");

                    b.HasOne("LMS.QuizFeedbackQuestion", "QuizFeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("QuizFeedbackQuestionId");

                    b.HasOne("LMS.TopicFeedbackQuestion", "TopicFeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("TopicFeedbackQuestionId");

                    b.Navigation("CourseFeedbackQuestion");

                    b.Navigation("QuizFeedbackQuestion");

                    b.Navigation("TopicFeedbackQuestion");
                });

            modelBuilder.Entity("LMS.FeedbackResponse", b =>
                {
                    b.HasOne("LMS.CourseFeedbackQuestion", "CourseFeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("CourseFeedbackQuestionId");

                    b.HasOne("LMS.QuizFeedbackQuestion", "QuizFeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("QuizFeedbackQuestionId");

                    b.HasOne("LMS.TopicFeedbackQuestion", "TopicFeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("TopicFeedbackQuestionId");

                    b.HasOne("LMS.Learner", "learner")
                        .WithMany()
                        .HasForeignKey("learner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseFeedbackQuestion");

                    b.Navigation("QuizFeedbackQuestion");

                    b.Navigation("TopicFeedbackQuestion");

                    b.Navigation("learner");
                });

            modelBuilder.Entity("LMS.LearnerAnswer", b =>
                {
                    b.HasOne("LMS.LearnerAttempt", "learner_attempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("learner_attempt_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.QuestionOption", "question_option")
                        .WithMany("UserAnswers")
                        .HasForeignKey("question_option_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.QuizQuestion", "quiz_question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("quiz_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("learner_attempt");

                    b.Navigation("question_option");

                    b.Navigation("quiz_question");
                });

            modelBuilder.Entity("LMS.LearnerAttempt", b =>
                {
                    b.HasOne("LMS.Learner", "learner")
                        .WithMany()
                        .HasForeignKey("learner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Quiz", "quiz")
                        .WithMany("UserAttempts")
                        .HasForeignKey("quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("learner");

                    b.Navigation("quiz");
                });

            modelBuilder.Entity("LMS.LearnerProfile", b =>
                {
                    b.HasOne("LMS.Learner", "learner")
                        .WithMany()
                        .HasForeignKey("learner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("learner");
                });

            modelBuilder.Entity("LMS.LearnerProgress", b =>
                {
                    b.HasOne("LMS.Course", "course")
                        .WithMany("Userprogress")
                        .HasForeignKey("course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Learner", "learner")
                        .WithMany()
                        .HasForeignKey("learner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Material", "material")
                        .WithMany("users")
                        .HasForeignKey("material_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Topic", "topic")
                        .WithMany("UsersProgress")
                        .HasForeignKey("topic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("learner");

                    b.Navigation("material");

                    b.Navigation("topic");
                });

            modelBuilder.Entity("LMS.Material", b =>
                {
                    b.HasOne("CodeFirstApproachForDB.Models.Course.MaterialType", "material_type")
                        .WithMany()
                        .HasForeignKey("material_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Topic", "topic")
                        .WithMany("Materials")
                        .HasForeignKey("topic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("material_type");

                    b.Navigation("topic");
                });

            modelBuilder.Entity("LMS.PasswordHistory", b =>
                {
                    b.HasOne("LMS.Learner", "learner")
                        .WithMany()
                        .HasForeignKey("learner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("learner");
                });

            modelBuilder.Entity("LMS.QuestionOption", b =>
                {
                    b.HasOne("LMS.QuizQuestion", "quiz_question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("quiz_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("quiz_question");
                });

            modelBuilder.Entity("LMS.Quiz", b =>
                {
                    b.HasOne("LMS.Course", "course")
                        .WithMany()
                        .HasForeignKey("course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Topic", "topic")
                        .WithMany()
                        .HasForeignKey("topic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("topic");
                });

            modelBuilder.Entity("LMS.QuizFeedbackQuestion", b =>
                {
                    b.HasOne("LMS.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("LMS.QuizQuestion", b =>
                {
                    b.HasOne("LMS.Quiz", "quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("quiz");
                });

            modelBuilder.Entity("LMS.Topic", b =>
                {
                    b.HasOne("LMS.Course", "course")
                        .WithMany("Topics")
                        .HasForeignKey("course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("LMS.TopicFeedbackQuestion", b =>
                {
                    b.HasOne("LMS.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("topic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LMS.Course", b =>
                {
                    b.Navigation("Topics");

                    b.Navigation("Userprogress");
                });

            modelBuilder.Entity("LMS.CourseCategory", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.CourseLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("LMS.LearnerAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LMS.Material", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("LMS.QuestionOption", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LMS.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("UserAttempts");
                });

            modelBuilder.Entity("LMS.QuizQuestion", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LMS.Topic", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("UsersProgress");
                });
#pragma warning restore 612, 618
        }
    }
}
